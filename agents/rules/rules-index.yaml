# Rule File Metadata
# Manages overview, tags, typical use cases, and size of each rule

rules:
  coding-principles:
    file: "coding-principles.md"
    tags: [implementation, code-quality, refactoring, clean-code, maintainability, function-design, error-handling, dependency-injection, performance, security]
    typical-use: "Language-agnostic code creation, modification, and refactoring principles applicable to all programming languages"
    size: medium
    key-references:
      - "YAGNI Principle - Kent Beck"
      - "Clean Code - Robert C. Martin"
      - "DRY Principle - The Pragmatic Programmer"
      - "Refactoring - Martin Fowler"
      - "Single Responsibility Principle - SOLID"
      - "Dependency Injection - Martin Fowler"
    sections:
      - "Core Philosophy"
      - "Code Quality"
      - "Function Design"
      - "Error Handling"
      - "Dependency Management"
      - "Performance Considerations"
      - "Code Organization"
      - "Commenting Principles"
      - "Refactoring Approach"
      - "Clean Code Guidelines"
      - "Testing Considerations"
      - "Security Principles"
      - "Documentation"
      - "Version Control Practices"
      - "Language-Specific Adaptations"
      - "Continuous Learning"

  testing-principles:
    file: "testing-principles.md"
    tags: [testing, tdd, quality, unit-testing, integration-testing, e2e-testing, test-design, coverage, mocking, test-independence, ci-cd]
    typical-use: "Universal testing principles, TDD practice, test creation and quality assurance for all programming languages"
    size: large
    key-references:
      - "Test-Driven Development - Kent Beck"
      - "Red-Green-Refactor Cycle - Kent Beck"
      - "AAA Pattern - Arrange-Act-Assert"
      - "Test Pyramid - Mike Cohn"
      - "Test Doubles - Gerard Meszaros"
    sections:
      - "Core Testing Philosophy"
      - "Test-Driven Development (TDD)"
      - "Quality Requirements"
      - "Test Types"
      - "Test Design Principles"
      - "Test Independence"
      - "Mocking and Test Doubles"
      - "Test Quality Practices"
      - "What to Test"
      - "Verification Requirements"
      - "Test Organization"
      - "Performance Considerations"
      - "Continuous Integration"
      - "Common Anti-Patterns to Avoid"
      - "Regression Testing"
      - "Testing Best Practices by Language Type"
      - "Documentation and Communication"
      - "Continuous Improvement"

  ai-development-guide:
    file: "ai-development-guide.md"
    tags: [anti-patterns, technical-judgment, debugging, quality-commands, rule-of-three, implementation, refactoring, code-reading, best-practices, language-agnostic, fail-fast, error-handling]
    typical-use: "Technical decision criteria, anti-pattern detection, debugging techniques, quality check workflows for all programming languages"
    size: large
    key-references:
      - "Rule of Three - Martin Fowler"
      - "5 Whys - Toyota Production System"
      - "DRY Principle - The Pragmatic Programmer"
      - "Single Responsibility Principle (SRP) - Clean Code"
      - "YAGNI Principle - Extreme Programming"
      - "Avoiding fallback in distributed systems - AWS Builders' Library"
    sections:
      - "Technical Anti-patterns (Red Flag Patterns)"
      - "Fail-Fast Fallback Design Principles"
      - "Rule of Three - Criteria for Code Duplication"
      - "Common Failure Patterns and Avoidance Methods"
      - "Debugging Techniques"
      - "Quality Check Workflow"
      - "Situations Requiring Technical Decisions"
      - "Continuous Improvement Mindset"

  documentation-criteria:
    file: "documentation-criteria.md"
    tags: [documentation, decision-making, adr, prd, design-doc, planning, process, scale-assessment]
    typical-use: "Scale assessment at implementation start, document creation criteria, ADR/PRD/Design Doc/Work Plan creation standards"
    size: medium
    key-references:
      - "ADR Method - Michael Nygard"
      - "Design Doc Culture - Google Engineering Practices"
      - "Single Source of Truth"
    sections:
      - "Creation Decision Matrix"
      - "ADR Creation Conditions (Required if Any Apply)"
      - "Detailed Document Definitions"
      - "Creation Process"
      - "Storage Locations"
      - "ADR Status"
      - "AI Automation Rules"
      - "Diagram Requirements"
      - "Common ADR Relationships"

  implementation-approach:
    file: "architecture/implementation-approach.md"
    tags: [architecture, implementation, task-decomposition, strategy-patterns, strangler-pattern, facade-pattern, design, planning, verification-levels]
    typical-use: "Implementation strategy selection, task decomposition, design decisions, large-scale change planning"
    size: medium
    key-references:
      - "Strangler Fig Pattern - Martin Fowler"
      - "Feature Slicing - Martin Fowler"
      - "Walking Skeleton - Alistair Cockburn"
      - "Facade Pattern - Gang of Four"
    sections:
      - "Meta-cognitive Strategy Selection Process"
      - "Verification Level Definitions"
      - "Integration Point Definitions"
      - "Anti-patterns"
      - "Guidelines for Meta-cognitive Execution"
